UCL_Juve %>% select(year,Round,place,Opponent,Results,Home_Score,Away_Score,Match_Outcome) %>% filter(year==2019) %>% View()
# Subsetting out UCL Qualifying rounds, europa leagues
UCL_Juve <- fjf[-c(12:15,90:93,112:115,122:127,144:153),]
# isolating scores
UCL_Juve$Home_Score <- substr(UCL_Juve$Results,1,1)
UCL_Juve$Away_Score <- substr(UCL_Juve$Results,3,3)
# coding match outcomes
UCL_Juve$Match_Outcome <- ifelse(UCL_Juve$Home_Score==UCL_Juve$Away_Score,"Draw",
ifelse(UCL_Juve$Home_Score>UCL_Juve$Away_Score,"Win",
ifelse(UCL_Juve$Home_Score<UCL_Juve$Away_Score,"Loss",
#ifelse(UCL_Juve$place=="H"&UCL_Juve$Home_Score>UCL_Juve$Away_Score,"Win",
#ifelse(UCL_Juve$place=="H"&UCL_Juve$Home_Score<UCL_Juve$Away_Score,"Loss",
#ifelse(UCL_Juve$place=="A"&UCL_Juve$Home_Score<UCL_Juve$Away_Score,"Win",
#ifelse(UCL_Juve$place=="A"&UCL_Juve$Home_Score>UCL_Juve$Away_Score,"Loss",
ifelse(UCL_Juve$place=="N"&UCL_Juve$year==1997,"Win",
ifelse(UCL_Juve$place=="N"&UCL_Juve$year%in%c(1998,2003,2015,2017),"Loss",NA)))))
UCL_Juve <- UCL_Juve %>% group_by(year) %>% mutate(match_num=row_number())
UCL_Juve$points <- ifelse(UCL_Juve$Match_Outcome=="Win",3,
ifelse(UCL_Juve$Match_Outcome=="Draw",1,0))
UCL_Juve <- UCL_Juve %>% group_by(year) %>% mutate(Form=zoo::rollmeanr(points,3,fill=NA))
ggplot(UCL_Juve, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=UCL_Juve, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + #ylab("Form - % of Points taken from Last 5 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(UCL_Juve, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=UCL_Juve, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
UCL_Juve %>% select(year,Round,place,Opponent,Results,Home_Score,Away_Score,Match_Outcome) %>% View()
getwd()
post_2013<-UCL_Juve[68:nrow(UCL_Juve), ]
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=UCL_Juve, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_hline(yintercept = 6.5,linetype=3) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_vline(xintercept = 6.5,linetype=3) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_vline(xintercept = 6.5,linetype=3) + # round of 16
geom_vline(xintercept = 8.5,linetype=3) + # qtr finals
geom_vline(xintercept = 10.5,linetype=3) + # semi final
geom_vline(xintercept = 11.5,linetype=3) + # final line
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_vline(xintercept = 0.5,linetype=3) + # group stage
geom_vline(xintercept = 6.5,linetype=3) + # round of 16
geom_vline(xintercept = 8.5,linetype=3) + # qtr finals
geom_vline(xintercept = 10.5,linetype=3) + # semi final
geom_vline(xintercept = 11.5,linetype=3) + # final line
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_rect(aes(xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf, alpha=0.3)) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_rect(aes(xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf, alpha=.3)) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_rect(mapping=null, aes(xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf, alpha=.3)) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_rect(mapping=NULL, aes(xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf, alpha=.3)) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=6.5,xmax=8.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=8.5,xmax=10.5,ymin=-Inf,ymax=Inf) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=6.5,xmax=8.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=8.5,xmax=10.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=10.5,xmax=12.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=12.5,xmax=13.5,ymin=-Inf,ymax=Inf) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=6.5,xmax=8.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=8.5,xmax=10.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=10.5,xmax=12.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=12.5,xmax=13.5,ymin=-Inf,ymax=Inf) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record",subtitle = "Shades represent stages (e.g. Group, Round of 16, Qtr-Finals, etc.)") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
post_2013
post_2013
post_2013
post_2013 %>% group_by(year) %>% last(Round)
post_2013 %>% last(year,Round)
post_2013 %>% top_n(year,Round)
post_2013 %>% group_by(year) %>% top_n(Round,1)
post_2013 %>% group_by(year) %>% top_n(1,Round)
post_2013 %>% group_by(year) %>% top_n(-1,Round)
post_2013 %>% group_by(year) %>% top_n(-1,Round)
post_2013 %>% group_by(year) %>% top_n(-1,year)
post_2013 %>% group_by(year) %>% top_n(-1,Round)
library(tidyverse)
library(DataExplorer)
library(broom)
library(e1071)
library(caret)
source(file = "engineering_seriea_design_matrix.R")
glimpse(DF)
is.na(DF)
table(is.na(DF))
glimpse(DF)
library(tidyverse)
library(DataExplorer)
library(broom)
library(e1071)
library(caret)
source(file = "engineering_seriea_design_matrix.R")
set.seed(1234)
#DF_DataExplorer_Report <- DF %>% select(-`Away Team`,-`Home Team`,-season,-round,-game_id)
#DataExplorer::create_report(data = DF_DataExplorer_Report, y = "result")
#### -- RF of DF ---
# Without using the trailing data, the overall accuracy rate of the model is around 60%
#https://uc-r.github.io/random_forests
library(ranger)
DF_new <- DF %>% select(-game_id,-goals_h,-goals_a) # removing goals, game_id
DF_new_complete <- DF_new[complete.cases(DF_new), ]
names(DF_new_complete) <- make.names(names(DF_new_complete))
# Ranger
train <- DF_new_complete %>% filter(!season=="2018-19")
test <- DF_new_complete %>% filter(season=="2018-19")
features<-names(train)
SerieARanger <- ranger(
formula   = result ~ .,
data      = train,
num.trees = 500,
mtry      = floor(length(features) / 3)
)
## OOB Prediction Erro - 38.91%
p <- predict(SerieARanger,test)
caret::confusionMatrix(p$predictions,test$result)
## Overall accuracy is around 0.587
## Draw accuracy is very low (0.15), compared to Home and Away (~0.8)
# hyperparameter grid search
hyper_grid <- expand.grid(
mtry       = seq(20, 50, by = 2),
node_size  = seq(3, 9, by = 2),
sampe_size = c(.55, .632, .70, .80),
OOB_RMSE   = 0
)
# Total # of combinations
nrow(hyper_grid)
for(i in 1:nrow(hyper_grid)) {
# train model
model <- ranger(
formula   = result ~ .,
data      = train,
num.trees       = 500,
mtry            = hyper_grid$mtry[i],
min.node.size   = hyper_grid$node_size[i],
#    sample.fraction = hyper_grid$sampe_size[i],
seed            = 123
)
# add OOB error to grid
hyper_grid$OOB_RMSE[i] <- sqrt(model$prediction.error)
}
## 67%-69% error rate
hyper_grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
# Optimal Tree
OOB_RMSE <- vector(mode = "numeric", length = 100)
for(i in seq_along(OOB_RMSE)) {
optimal_ranger <- ranger(
formula   = result ~ .,
data      = train,
num.trees       = 500,
mtry            = 30,
min.node.size   = 7,
#    sample.fraction = .8,
importance      = 'impurity'
)
OOB_RMSE[i] <- sqrt(optimal_ranger$prediction.error)
}
## Error rates visualized
hist(OOB_RMSE, breaks = 20)
## League Rank by far the most valuable variable
## Lead by scoring chances, shots in the box, league rank, shonts on, balls won ..
optimal_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
pred_ranger<-predict(optimal_ranger,test)
caret::confusionMatrix(pred_ranger$predictions,test$result)
# Overall Accuracy is near 60%. With Draw at 18% and Home/Away near 78-79%
## League Rank by far the most valuable variable
## Lead by scoring chances, shots in the box, league rank, shonts on, balls won ..
optimal_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
glimpse(df)
glimpse(DF)
#### -- RF of DF_Trailing ---
## With Trailing
DF_trailing_test <- DF_trailing %>% select(-game_id,-points)
DF_trailing_test <- DF_trailing_test[complete.cases(DF_trailing_test), ]
trail_train <- DF_trailing_test %>% filter(!season=="2018-19")
trail_test <- DF_trailing_test %>% filter(season=="2018-19")
trail_features<-names(trail_train)
Trail_SerieARanger <- ranger(
formula   = result ~ .,
data      = trail_train,
num.trees = 500,
mtry      = floor(length(trail_features) / 3)
)
## OOB Prediction Erro - 45.18%
## Tuning Parameters
# ntree - number of trees
# mtry - the number of variables to randomly sample as candidates at each split.
#  A common suggestion is to start with 5 values evenly spaced across the range from 2 to p.
# samplesize - the number of samples to train on
# nodesize - minimum number of samples within the terminal nodes. Controls
#  the complexity of the trees. Smaller node size allows for deeper,
#  more complex trees and smaller node results in shallower trees.
# maxnodes - maximum number of terminal nodes. Another way to control the complexity
# Full Grid Search with Ranger
# hyperparameter grid search
hyper_grid <- expand.grid(
mtry       = seq(20, 50, by = 2),
node_size  = seq(3, 9, by = 2),
sampe_size = c(.55, .632, .70, .80),
OOB_RMSE   = 0
)
# Total # of combinations
nrow(hyper_grid)
for(i in 1:nrow(hyper_grid)) {
# train model
model <- ranger(
formula   = result ~ .,
data      = trail_train,
num.trees       = 500,
mtry            = hyper_grid$mtry[i],
min.node.size   = hyper_grid$node_size[i],
#    sample.fraction = hyper_grid$sampe_size[i],
seed            = 123
)
# add OOB error to grid
hyper_grid$OOB_RMSE[i] <- sqrt(model$prediction.error)
}
## 66%-68% error rate
hyper_grid %>%
dplyr::arrange(OOB_RMSE) %>%
head(10)
# Optimal Tree
OOB_RMSE <- vector(mode = "numeric", length = 100)
for(i in seq_along(OOB_RMSE)) {
optimal_ranger <- ranger(
formula   = result ~ .,
data      = trail_train,
num.trees       = 500,
mtry            = 28,
min.node.size   = 5,
#    sample.fraction = .8,
importance      = 'impurity'
)
OOB_RMSE[i] <- sqrt(optimal_ranger$prediction.error)
}
## Error rates visualized
hist(OOB_RMSE, breaks = 20)
optimal_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
## League Rank by far the most valuable variable
pred_ranger<-predict(optimal_ranger,trail_test)
table(pred_ranger$predictions==trail_test$result) # 180/(188+180) -48.9
caret::confusionMatrix(pred_ranger$predictions,trail_test$result)
trail_features
features
#https://uc-r.github.io/random_forests
library(ranger)
DF_new <- DF %>% select(-game_id,-goals_h,-goals_a) # removing goals, game_id
DF_new_complete <- DF_new[complete.cases(DF_new), ]
names(DF_new_complete) <- make.names(names(DF_new_complete))
# Ranger
train <- DF_new_complete %>% filter(!season=="2018-19")
test <- DF_new_complete %>% filter(season=="2018-19")
table(is.na(DF_Imputed))
table(is.na(DF))
DF_new_complete <- preProcess(DF, method = "knnImpute")
dim(DF)
dim(DF_new_complete)
DF_new_complete
source(file = "engineering_seriea_design_matrix.R")
dim(DF)
head(DF)
fj
dim(fj)
library(rvest)
library(tidyverse)
library(data.table)
## Example of grabbing results for 1996
juve_ucl_results <- list()
years<-1997:2019
for (i in years){
print(paste("grabbing for ", i, " season",sep=""))
# Read in tables
url <- paste("https://www.worldfootball.net/teams/juventus/",i,"/3/",sep="")
juve_hist001 <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="site"]/div[3]/div[1]/div/div[3]/div/table') %>%
html_table(fill = T) %>%
as.data.frame()
# grab the first row where Champions League appears to begin subset
begin <- juve_hist001[juve_hist001$X1 %like% "Champions", ] %>%
row.names() %>% as.numeric()
if (length(begin)==0) {
next
}
# grab the first row where "Serie A" appears to end subset
end<-juve_hist001[juve_hist001$X1 %like% "Serie A", ] %>%
row.names() %>%
as.numeric()
# Some seasons have Europea League results -- identifying those
#  second_end <- juve_hist002[juve_hist001$X1 %like% "Europa", ] %>%
#    row.names() %>% as.numeric()
#  true_end<-ifelse(length(second_end>0),second_end,end)
juve_hist002<-juve_hist001[(begin+1):(end-1),]
names(juve_hist002) <- juve_hist002[1,]
juve_hist002 <- juve_hist002[-1,]
juve_hist002$year <- i
juve_ucl_results[[i]]<-juve_hist002
}
juve_ucl_results_final<-juve_ucl_results[years]
fjf<-bind_rows(juve_ucl_results_final)
fjf <- fjf[,c(1,3,5,6,8)]
fjf
# Subsetting out UCL Qualifying rounds, europa leagues
UCL_Juve <- fjf[-c(12:15,90:93,112:115,122:127,144:153),]
UCL_Juve$Home_Score <- substr(UCL_Juve$Results,1,1)
UCL_Juve$Away_Score <- substr(UCL_Juve$Results,3,3)
# coding match outcomes
UCL_Juve$Match_Outcome <- ifelse(UCL_Juve$Home_Score==UCL_Juve$Away_Score,"Draw",
ifelse(UCL_Juve$Home_Score>UCL_Juve$Away_Score,"Win",
ifelse(UCL_Juve$Home_Score<UCL_Juve$Away_Score,"Loss",
#ifelse(UCL_Juve$place=="H"&UCL_Juve$Home_Score>UCL_Juve$Away_Score,"Win",
#ifelse(UCL_Juve$place=="H"&UCL_Juve$Home_Score<UCL_Juve$Away_Score,"Loss",
#ifelse(UCL_Juve$place=="A"&UCL_Juve$Home_Score<UCL_Juve$Away_Score,"Win",
#ifelse(UCL_Juve$place=="A"&UCL_Juve$Home_Score>UCL_Juve$Away_Score,"Loss",
ifelse(UCL_Juve$place=="N"&UCL_Juve$year==1997,"Win",
ifelse(UCL_Juve$place=="N"&UCL_Juve$year%in%c(1998,2003,2015,2017),"Loss",NA)))))
UCL_Juve <- UCL_Juve %>% group_by(year) %>% mutate(match_num=row_number())
UCL_Juve$points <- ifelse(UCL_Juve$Match_Outcome=="Win",3,
ifelse(UCL_Juve$Match_Outcome=="Draw",1,0))
UCL_Juve <- UCL_Juve %>% group_by(year) %>% mutate(Form=zoo::rollmeanr(points,3,fill=NA))
ggplot(UCL_Juve, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=UCL_Juve, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
post_2013<-UCL_Juve[68:nrow(UCL_Juve), ]
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
geom_vline(xintercept = 0.5,linetype=3) + # group stage
geom_vline(xintercept = 6.5,linetype=3) + # round of 16
geom_vline(xintercept = 8.5,linetype=3) + # qtr finals
geom_vline(xintercept = 10.5,linetype=3) + # semi final
geom_vline(xintercept = 11.5,linetype=3) + # final line
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
ggplot(post_2013, aes(x=match_num,y=Form)) +
geom_line() +
geom_point(data=post_2013, aes(x=match_num, y=points, color=Match_Outcome)) +
scale_color_manual(values = c("#bdbdbd","#e34a33","#31a354")) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=0.5,xmax=6.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=6.5,xmax=8.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=8.5,xmax=10.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.15,
xmin=10.5,xmax=12.5,ymin=-Inf,ymax=Inf) +
annotate("rect", fill = "grey", alpha = 0.3,
xmin=12.5,xmax=13.5,ymin=-Inf,ymax=Inf) +
facet_wrap(vars(year),ncol = 2) +
theme_minimal() + xlab("Match Number") + ylab("Form - % of Points taken from Last 3 Matches") +
ggtitle("Juventus UCL Record",subtitle = "Shades represent stages (e.g. Group, Round of 16, Qtr-Finals, etc.)") +
theme(axis.text.y = element_blank(), legend.position = "bottom")
