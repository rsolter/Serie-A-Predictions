names(away_records) <- away_records_names
## Reordering away_records to match
away_records <- away_records %>% select(home_records_names)
## Binding records together
team_records <- rbind(home_records,away_records) %>%
arrange(match_date) %>% as.data.frame()
team_records$outcome <- ifelse(team_records$goals_team>team_records$goals_opp,"W",
ifelse(team_records$goals_team<team_records$goals_opp,"L","D"))
team_records$Points_gained <- ifelse(team_records$outcome=="W",3,
ifelse(team_records$outcome=="D",1,
ifelse(team_records$outcome=="L",0,NA)))
## Adding Elos for team
team_elos <- italy_elos %>%
filter(Club==tmp_team)
team_records <- left_join(team_records,team_elos, c("Team_team"="Club")) %>%
filter(match_date>=From) %>%
filter(match_date<=To) %>%
select(-To,-From)
## Removing anything ending in opp (will re-join by match-id after trailing step)
team_records <- team_records %>% select(-ends_with("opp"))
team_dfs[[i]] <- team_records
rm(away_records,home_records,team_elos,team_records,home_records_names,away_records_names,tmp_team)
}
#### Trailing variables by 3 matches----
trailing_func <- function(data,trail_count){
lag(zoo::rollmean(x=data,k=trail_count,align="right",fill=NA),1)
# Example
# y <-c(10,10,10,13,7,0)
# lag(zoo::rollmean(x = y,k=3,align="right",fill=NA),1)
}
team_trailing <- list()
# Setting Trailing amount to 3
trail_count_iter<-3
for(k in 1:length(team_dfs)){
tmp_df <- team_dfs[[k]]
trail_df <- tmp_df %>%
group_by(Team_team,season) %>%
mutate(goals_team=trailing_func(goals_team,trail_count_iter),
saves_team=trailing_func(saves_team,trail_count_iter),
shots_team=trailing_func(shots_team,trail_count_iter),
shots_on_team=trailing_func(shots_on_team,trail_count_iter),
shots_off_team=trailing_func(shots_off_team,trail_count_iter),
shots_box_team=trailing_func(shots_box_team,trail_count_iter),
fouls_team=trailing_func(fouls_team,trail_count_iter),
scoring_chances_team=trailing_func(scoring_chances_team,trail_count_iter),
offsides_team=trailing_func(offsides_team,trail_count_iter),
corners_team=trailing_func(corners_team,trail_count_iter),
yellow_team=trailing_func(yellow_team,trail_count_iter),
fast_breaks_team=trailing_func(fast_breaks_team,trail_count_iter),
poss_team=trailing_func(poss_team,trail_count_iter),
attacks_team=trailing_func(attacks_team,trail_count_iter))
team_trailing[[k]] <- trail_df
}
### Re-creating and joining opposition data and betting data----
load(file="00 Data/betting_probabilities.rdata")
master_trailing <- bind_rows(team_trailing) %>% as.data.frame() %>% arrange(match_id)
last <- ncol(master_trailing)
colnames(master_trailing)[last] <- "Elo_team"
# Exactly 2 copies of each match_id
# master_trailing %>% group_by(match_id) %>% tally() %>% select(n) %>% unique()
# creating opposition data
opp_trailing <- master_trailing
opp_names <- names(opp_trailing)
opp_names <- stringr::str_replace(opp_names,"_team$","_opp")
names(opp_trailing) <- opp_names
# Removing home_match from opp
opp_trailing <- opp_trailing %>% select(-home_match)
final_data <- list()
teams <- master_trailing$Team_team %>% unique()
for (f in 1:length(teams)){
tmp_team <- teams[f]
# isolating team records
team_records <- master_trailing %>% filter(Team_team==tmp_team)
# finding matching records for opposition
opp_records <- opp_trailing %>%
filter(match_id%in%team_records$match_id) %>%
filter(!Team_opp==tmp_team) %>%
select(-outcome,-Points_gained)
final_records <- left_join(team_records,opp_records)
# Re-ordering columns
final_records <- final_records[,c(19,17,14,15,1,24,21,20,22,2:13,16,18,23,25:39)]
# cleaning up team column names
names(final_records)[5] <- "Team"
names(final_records)[6] <- "Opp"
# Chaning characters to factors
final_records$Team <- as.factor(final_records$Team)
final_records$Team <- as.factor(final_records$Team)
final_records$home_match <- as.factor(final_records$home_match)
final_records$outcome <- as.factor(final_records$outcome)
# Adding in betting odds
team_probs <- team_betting_probs %>% filter(Team==tmp_team) %>% select(Date,Team,B365_team,B365_opp,B365D)
final_records <- left_join(final_records,team_probs,by=c("Team"="Team","match_date"="Date"))
final_data[[f]] <- final_records
}
glimpse(final_records)
save(final_data,file="00 Data/Team_split_Data.rdata")
Samp <- final_data[[17]]
glimpse(Samp)
Samp <- Samp[complete.cases(Samp), ]
glimpse(Samp)
## Loading
s1 <- read.csv("00 Data/Betting csvs/I1.csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA) %>%
mutate(season="2019-20")
s2 <- read.csv("00 Data/Betting csvs/I1 (1).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA)%>%
mutate(season="2018-19")
s3 <- read.csv("00 Data/Betting csvs/I1 (2).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA) %>%
mutate(season="2017-18")
s4 <- read.csv("00 Data/Betting csvs/I1 (3).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA) %>%
mutate(season="2016-27")
s5 <- read.csv("00 Data/Betting csvs/I1 (4).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA)%>%
mutate(season="2015-16")
betting_raw <- rbind(s1,s2,s3,s4,s5)
glimpse(betting_raw)
## Betting Data Processing
library(tidyverse)
## Loading
s1 <- read.csv("00 Data/Betting csvs/I1.csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA) %>%
mutate(season="2019-20")
s2 <- read.csv("00 Data/Betting csvs/I1 (1).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA)%>%
mutate(season="2018-19")
s3 <- read.csv("00 Data/Betting csvs/I1 (2).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA) %>%
mutate(season="2017-18")
s4 <- read.csv("00 Data/Betting csvs/I1 (3).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA) %>%
mutate(season="2016-27")
s5 <- read.csv("00 Data/Betting csvs/I1 (4).csv",header = T,stringsAsFactors = F) %>%
select(Date,HomeTeam,AwayTeam,B365H,B365A,B365D,BWH,BWD,BWA)%>%
mutate(season="2015-16")
betting_raw <- rbind(s1,s2,s3,s4,s5)
betting_raw_out <- betting_raw %>% select(season, HomeTeam, AwayTeam, B365H,B365A,B365D)
betting_raw_out
save(betting_raw_out,file="00 Data/betting_raw.rdata")
load(file="00 Data/betting_raw.rdata")
betting_raw_out
betting_raw_out %>% glimpse()
betting_raw_out %>% glimpse()
long_betting <- betting_raw_out %>% gather("Outcome,Odds":4:6)
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6)
glimpse(long_betting)
head(long_betting)
long_betting %>% arrange(HomeTeam,AwayTeam) %>% head()
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6) %>% filter(!is.na(HomeTeam))
glimpse(long_betting)
knitr::opts_chunk$set(echo = TRUE)
load(file="00 Data/betting_raw.rdata")
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6) %>% filter(!is.na(HomeTeam))
library(randomForest)
library(tidyverse)
library(kableExtra)
library(caret)
library(e1071)
library(knitr)
load(file="00 Data/full_raw_scraped.rdata")
load(file="00 Data/italy_elos.rdata")
italy_elos$Club <- as.factor(italy_elos$Club)
load(file="00 Data/betting_raw.rdata")
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6) %>% filter(!is.na(HomeTeam))
long_betting %>% head()
ggplot(long_betting,aes(Odds)) +geom_boxplot()
ggplot(long_betting,aes(Odds), group=Outcome) +geom_boxplot()
ggplot(long_betting,aes(Odds), group=Outcome) +geom_boxplot() + coord_flip()
ggplot(long_betting,aes(Odds, group=Outcome) )+geom_boxplot() + coord_flip()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(color=group) + coord_flip()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(color=Outcome) + coord_flip()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome, fill=Outcome) + coord_flip()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome) + coord_flip() +
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
stat_summary(fun.y=mean, colour="darkred", geom="point",
shape=18, size=3,show_guide = FALSE) +
geom_text(data = means, aes(label = weight, y = weight + 0.08))
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
stat_summary()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
stat_summary()
head(long_betting)
means <- long_betting %>% group_by(Outcome) %>% summarise(mean=mean(Odds))
sds <- long_betting %>% group_by(Outcome) %>% summarise(sd=sd(Odds))
means
load(file="00 Data/betting_raw.rdata")
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6) %>% filter(!is.na(HomeTeam))
means <- long_betting %>% group_by(Outcome) %>% summarise(mean=mean(Odds,na.rm=T))
sds <- long_betting %>% group_by(Outcome) %>% summarise(sd=sd(Odds,na.rm=T))
means
sds
mins <- long_betting %>% group_by(Outcome) %>% summarise(min=min(Odds,na.rm=T))
mins
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
stat_summary()
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal()
means
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Outcome, y = mean + 0.08))
long_betting %>% head()
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6) %>% filter(!is.na(HomeTeam))
means <- long_betting %>% group_by(Outcome) %>% summarise(mean=mean(Odds,na.rm=T))
sds <- long_betting %>% group_by(Outcome) %>% summarise(sd=sd(Odds,na.rm=T))
mins <- long_betting %>% group_by(Outcome) %>% summarise(min=min(Odds,na.rm=T))
ggplot(long_betting,aes(Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Outcome, y = mean + 0.08))
long_betting %>% head()
ggplot(long_betting,aes(x=Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Outcome, y = mean + 0.08))
ggplot(long_betting,aes(x=Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal()
means
means <- long_betting %>% group_by(Outcome) %>% summarise(Odds=mean(Odds,na.rm=T))
ggplot(long_betting,aes(x=Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Outcome, y = mean + 0.08))
ggplot(long_betting,aes(x=Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Outcome, y = Odds))
ggplot(long_betting,aes(x=Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Odds, y = Odds))
means
ggplot(long_betting,aes(x=Odds, group=Outcome))+
geom_boxplot(aes(color=Outcome)) + coord_flip() +
theme(legend.position = "bottom") + theme_minimal() +
geom_text(data = means, aes(label = Outcome, y = Odds))
glimpse(means)
glimpse(long_betting)
library(randomForest)
library(tidyverse)
library(kableExtra)
library(caret)
library(e1071)
library(knitr)
load(file="00 Data/full_raw_scraped.rdata")
load(file="00 Data/italy_elos.rdata")
italy_elos$Club <- as.factor(italy_elos$Club)
# Partitioning Sampdoria Data
Samp <- final_data[[17]]
# removing First three records for each season
Samp <- Samp[complete.cases(Samp), ]
Samp_train <- Samp %>%
filter(season%in%c("2015-16","2016-17","2017-18","2018-19")) %>%
select(-c(match_id,match_date,season,round,Team,Opp,Points_gained,B365_team,B365_opp,B365D)) %>%
as.data.frame() # 140 records
Samp_test <- Samp %>%
filter(season%in%c("2019-20")) %>%
select(-c(match_id,match_date,season,round,Team,Opp,Points_gained,B365_team,B365_opp,B365D)) # 21 records
glimpse(Samp)
myTimeControl <- trainControl(method = "timeslice",
initialWindow = 10,
horizon = 1,
fixedWindow = FALSE,
allowParallel = TRUE)
samp_mult_log = train(
outcome ~ .,
data = Samp_train,
method = "multinom",
preProc = c("pca"),
trControl = myTimeControl,
trace=FALSE
)
Predictions1 <- predict(samp_mult_log,Samp_train)
Predictions1
confusionMatrix(Predictions1, as.factor(Samp_validation$outcome),mode = "prec_recall")
confusionMatrix(Predictions1, as.factor(Samp_train$outcome),mode = "prec_recall")
samp_mult_log
knitr::opts_chunk$set(echo = TRUE)
# Setting up the training controls to make use of timeslice function
# may want to have the trainControl run through diferent lengths of initial windows
myTimeControl <- trainControl(method = "timeslice",
initialWindow = 10,
horizon = 1,
fixedWindow = FALSE,
allowParallel = TRUE,summaryFunction = mnLogLoss)
# Setting up the training controls to make use of timeslice function
# may want to have the trainControl run through diferent lengths of initial windows
myTimeControl <- trainControl(method = "timeslice",
initialWindow = 10,
horizon = 1,
fixedWindow = FALSE,
allowParallel = TRUE,summaryFunction = mnLogLoss)
#,preProcOptions = )
# Training multinomial model
set.seed(555)
samp_mult_log = train(
outcome ~ .,
data = Samp_train,
method = "multinom",
preProc = c("pca"),
trControl = myTimeControl,
metric="logLoss",
trace=FALSE
)
# Setting up the training controls to make use of timeslice function
# may want to have the trainControl run through diferent lengths of initial windows
myTimeControl <- trainControl(method = "timeslice",
initialWindow = 10,
horizon = 1,
fixedWindow = FALSE,
allowParallel = TRUE,summaryFunction = mnLogLoss,classProbs = TRUE)
set.seed(555)
samp_mult_log = train(
outcome ~ .,
data = Samp_train,
method = "multinom",
preProc = c("pca"),
trControl = myTimeControl,
metric="logLoss",
trace=FALSE
)
samp_mult_log
Predictions1 <- predict(samp_mult_log,Samp_train)
confusionMatrix(Predictions1, as.factor(Samp_train$outcome),mode = "prec_recall")
Predictions1_p <- predict(samp_mult_log,Samp_test,type = "prob")
Predictions1_p
Predictions1_p <- round(Predictions1_p,5)
Predictions1_p <- round(Predictions1_p,5)
Predictions1_p
Predictions1_p <- cbind(Predictions1_p,Predictions1,Samp_test$outcome)
names(Predictions1_p) <- c("D","L","W","Predicted","Actual")
Predictions1_p <- Predictions1_p %>%
mutate(Correct=ifelse(Predictions1_p$Predicted==Predictions1_p$Actual,1,0)) %>%
mutate(Cum_Correct=cummean(Correct)) %>%
mutate(Roll_mean_Correct=zoo::rollmean(Correct,k=5,align="right",fill=NA)) %>%
mutate(Round=4:38)
ggplot(Predictions1_p) +
geom_line(aes(x=Round,y=Cum_Correct), colour="dark green") +
geom_line(aes(x=Round,y=Roll_mean_Correct),linetype=2) +
xlab("Round") + ylab("Accuracy Rate") +
ggtitle("Validation Dataset Accuracy of Multinomial Logistic Regression") +
labs(caption="Cumulative Accuracy in green, dotted-line is rolling average of accuracy") +
theme_minimal() +
ylim(0,1)
Predictions1 <- predict(samp_mult_log,Samp_train)
confusionMatrix(Predictions1, as.factor(Samp_train$outcome),mode = "prec_recall")
Predictions1_p <- predict(samp_mult_log,Samp_test,type = "prob")
Predictions1_p <- round(Predictions1_p,5)
Predictions2 <- predict(samp_mult_log,Samp_test)
confusionMatrix(Predictions2, as.factor(Samp_test$outcome),mode = "prec_recall")
samp_svm = train(
outcome ~ .,
data = Samp_train,
method = "svmLinear",
preProc = c("pca"),
trControl = myTimeControl,
metric="logLoss",
)
Predictions3 <- predict(samp_svm,Samp_test)
confusionMatrix(Predictions2, as.factor(Samp_test$outcome),mode = "prec_recall")
samp_rf = train(
outcome ~ .,
data = Samp_train,
method = "rf",
preProc = c("pca"),
trControl = myTimeControl
)
Predictions3 <- predict(samp_rf,Samp_test)
confusionMatrix(Predictions3, as.factor(Samp_test$outcome),mode = "prec_recall")
library(Metrics)
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
library(tidyverse)
library(kableExtra)
library(caret)
library(e1071)
library(knitr)
load(file="00 Data/full_raw_scraped.rdata")
load(file="00 Data/italy_elos.rdata")
italy_elos$Club <- as.factor(italy_elos$Club)
raw_bet <- data.frame(Date="24/08/2019",HomeTeam="Parma",
AwayTeam="Juventus",B365H=9,
B365A=1.33, B365D=5.25)
kable(raw_bet, caption="Example Odds from Bet365")
bet_prob <- raw_bet %>%
mutate(B365H=1/B365H,
B365A=1/B365A,
B365D=1/B365D)
kable(bet_prob, caption = "Converted to Probabilities")
load(file="00 Data/betting_raw.rdata")
long_betting <- betting_raw_out %>% gather("Outcome","Odds",4:6) %>% filter(!is.na(HomeTeam))
long_betting
all_records <- final_data %>% bind_rows()
glimpse(all_records)
final_records %>% select(match_id,season,Team,Opp,outcome,home_match,B365_opp,B365_team,B365D) %>% head()
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,outcome,home_match,B365_opp,B365_team,B365D) %>% head()
dim(all_records)
final_data %>% length()
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,outcome,home_match,B365_opp,B365_team,B365D)
all_records %>% dim()
length(unique(all_records$match_id))
1767*2
head(all_records)
table(is.na(all_records$B365_team))
Samp %>% head()
head(all_records)
all_records %>% arrange(match_id) %>% head()
all_records %>% arrange(match_id) %>% head() %>% group_by(match_id) %>% first(1)
all_records %>% arrange(match_id) %>% head() %>% group_by(match_id) %>% top_n(1)
all_records %>%
group_by(match_id) %>%
arrange(match_id) %>%
filter(row_number()==1) %>% head()
all_records %>%
group_by(match_id) %>%
arrange(match_id) %>%
filter(row_number()==1) %>% dim()
all_records %>%
group_by(match_id) %>%
arrange(match_id) %>%
filter(row_number()==1) %>% dim()all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,outcome,home_match,B365_opp,B365_team,B365D) %>%
group_by(match_id) %>%
arrange(match_id) %>%
filter(row_number()==1)
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,outcome,home_match,B365_opp,B365_team,B365D) %>%
group_by(match_id) %>%
arrange(match_id) %>%
filter(row_number()==1)
glimpse(all_records)
all_records <- final_data %>% bind_rows()
dim(all_records)
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,home,outcome,home_match,B365_opp,B365_team,B365D)
final_data[[1]]
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,home_match,outcome,home_match,B365_opp,B365_team,B365D) %>%
filter(home_match==1)
all_records %>% dim()
all_records %>% head()
v
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,home_match,outcome,home_match,B365_opp,B365_team,B365D) %>%
filter(home_match==1) %>%
gather("outcome","odds",7:9)
head(all_records)
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,home_match,outcome,home_match,B365_opp,B365_team,B365D) %>%
filter(home_match==1) %>%
gather("betting_outcome","odds",7:9)
head(all_records)
table(all_records$outcome)
all_records$oddmakers_correct <- ifelse((betting_odds=="B365_opp"&outcome=="L")|
(betting_odds=="B365D"&outcome=="D")|
(betting_odds=="B365_teamp"&outcome=="W"),1,0)
all_records$oddmakers_correct <- ifelse((all_records$betting_odds=="B365_opp"&all_records$outcome=="L")|
(all_records$betting_odds=="B365D"&all_records$outcome=="D")|
(all_records$betting_odds=="B365_teamp"&all_records$outcome=="W"),1,0)
all_records$oddmakers_correct <- ifelse((all_records$betting_odds=="B365_opp"&all_records$outcome=="L")|
(all_records$betting_odds=="B365D"&all_records$outcome=="D")|
(all_records$betting_odds=="B365_teamp"&all_records$outcome=="W"),1,0)
all_records %>%
mutate(oddmakers_correct= ifelse((betting_odds=="B365_opp"&outcome=="L")|
(betting_odds=="B365D"&outcome=="D")|
(betting_odds=="B365_teamp"&outcome=="W"),1,0))
all_records <- final_data %>% bind_rows() %>%
select(match_id,season,Team,Opp,home_match,outcome,home_match,B365_opp,B365_team,B365D) %>%
filter(home_match==1) %>%
gather("betting_outcome","odds",7:9)
all_records %>%
mutate(oddmakers_correct= ifelse((betting_odds=="B365_opp"&outcome=="L")|
(betting_odds=="B365D"&outcome=="D")|
(betting_odds=="B365_teamp"&outcome=="W"),1,0))
all_records %>%
mutate(oddmakers_correct= ifelse((betting_outcome=="B365_opp"&outcome=="L")|
(betting_outcome=="B365D"&outcome=="D")|
(betting_outcome=="B365_teamp"&outcome=="W"),1,0))
all_records <- all_records %>%
mutate(oddmakers_correct= ifelse((betting_outcome=="B365_opp"&outcome=="L")|
(betting_outcome=="B365D"&outcome=="D")|
(betting_outcome=="B365_teamp"&outcome=="W"),1,0))
all_records %>% head()
table(all_records$oddmakers_correct)
979/nrow(all_records)
glimpse(betting_raw_out)
glimpse(betting_raw)
s1 <- read.csv("00 Data/Betting csvs/I1.csv",header = T,stringsAsFactors = F)
s1 %>% glimpse()
