metric="logLoss",
trace=FALSE
)
samp_mult_log2
mult_log_pred2 <- predict(samp_mult_log2,Samp_test)
confusionMatrix(mult_log_pred2, as.factor(Samp_test$outcome),mode = "prec_recall")
# Training multinomial model
set.seed(555)
samp_mult_log2 = train(
outcome ~ .,
data = Samp_train,
method = "multinom",
trControl = myTimeControl,
metric="logLoss",
trace=FALSE
)
samp_mult_log2
mult_log_pred2 <- predict(samp_mult_log2,Samp_test)
confusionMatrix(mult_log_pred2, as.factor(Samp_test$outcome),mode = "prec_recall")
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
library(tidyverse)
library(kableExtra)
library(caret)
library(caretEnsemble)
library(e1071)
library(knitr)
library(pROC)
library(ggcorrplot)
load(file="00 Data/full_raw_scraped.rdata")
load(file="00 Data/italy_elos.rdata")
italy_elos$Club <- as.factor(italy_elos$Club)
mult_log_pred_prob <- predict(samp_mult_log,Samp_test,type="prob")
mult_log_pred_prob
svm_pred_prob <- predict(svm_mod,Samp_test,type="prob")
svm_pred_prob
samp_rf_pred_prob <- predict(samp_rf,Samp_test,type="prob")
samp_rf_pred_prob
samp_c5_pred_prob <- predict(samp_c5,Samp_test,type="prob")
mult_log_pred
confusionMatrix(mult_log_pred, as.factor(Samp_test$outcome),mode = "prec_recall")
i<-confusionMatrix(mult_log_pred, as.factor(Samp_test$outcome),mode = "prec_recall")
i$overall
i$overall[1]
c1 <- confusionMatrix(mult_log_pred, as.factor(Samp_test$outcome),mode = "prec_recall")
c1
c1$overall
c1$overall
c1$overall[1]
c1$overall[[1]]
c2<-confusionMatrix(svm_pred, as.factor(Samp_test$outcome),mode = "prec_recall")
c2
c2$overall[[1]]
c3 <- confusionMatrix(samp_rf_pred, as.factor(Samp_test$outcome),mode = "prec_recall")
ranger_acc <- c3$overall[[1]]
ranger_acc
v
c4 <- confusionMatrix(samp_c5_pred, as.factor(Samp_test$outcome),mode = "prec_recall")
c5_acc <- c4$overall[[1]]
c4_acc <- c4$overall[[1]]
c5_acc <- c4$overall[[1]]
(mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc)
mult_log_acc <- c1$overall[[1]]
(mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc)
svm_acc <-c2$overall[[1]]
ranger_acc <- c3$overall[[1]]
c5_acc <- c4$overall[[1]]
(mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc)
((mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc))/4
probabilities <- c(mult_log_pred_prob,svm_pred_prob,samp_rf_pred_prob,samp_c5_pred_prob)
acc_weights <- c(mult_log_acc,svm_acc,ranger_acc,c5_acc)
weighted.mean(probabilities,acc_weights)
((mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc))/4
Samp_test$outcome
((mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc))/4
acc_weights <- c(mult_log_acc,svm_acc,ranger_acc,c5_acc)
acc_weights
sum(acc_weights)
acc_weights2<-acc_weights/sum(acc_weights)
acc_weights2
((mult_log_pred_prob*acc_weights2[1]) + (svm_pred_prob*acc_weights2[2]) + (samp_rf_pred_prob*acc_weights2[3]) + (samp_c5_pred_prob*acc_weights2[4]))
weighted_probabilities<-((mult_log_pred_prob*acc_weights2[1]) + (svm_pred_prob*acc_weights2[2]) + (samp_rf_pred_prob*acc_weights2[3]) + (samp_c5_pred_prob*acc_weights2[4])) %>% as.data.frame()
weighted_probabilities
weighted_probabilities$prediction <- c("W","W","W","L","L","L","W","W","L","W","L","W","D","L","L","W","L","D","L","W","W")
weighted_probabilities
weighted_probabilities$actual <- Samp_test$outcome
weighted_probabilities %>%
mutate(Accuracy=ifelse(actual==prediction,1,0)) %>%
select(actual,prediction,Accuracy,D,L,W)
weighted_probabilities %>%
mutate(Accuracy=ifelse(actual==prediction,1,0)) %>%
select(actual,prediction,Accuracy,D,L,W)
wpf <- weighted_probabilities %>%
mutate(Accuracy=ifelse(actual==prediction,1,0)) %>%
select(actual,prediction,Accuracy,D,L,W)
table(wpf$Accuracy)
12/21
samp_c52 = train(
outcome ~ .,
data = Samp_train,
method = "C5.0",
trControl = myTimeControl
)
load(file="00 Data/betting_raw.rdata")
betting_raw %>% head()
betting_raw_out %>% glimpse()
betting_raw_out %>% filter(season=="2019-20") %>% filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria")
dim(wpf)
Samp_test %>% glimpse()
samp_2019_bet <- samp_2019_bet[1:21, ]
load(file="00 Data/betting_raw.rdata")
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria")
samp_2019_bet <- samp_2019_bet[1:21, ]
wpf
samp_2019_bet %>% head()
table(samp_2019_bet$result)
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria") %>%
mutate(correct_pay_out=ifelse(result=="Away",B365A,
ifelse(result=="Home",B365H,D))
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria") %>%
mutate(correct_pay_out=ifelse(result=="Away",B365A,
ifelse(result=="Home",B365H,D)))
samp_2019_bet
load(file="00 Data/betting_raw.rdata")
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria") %>%
mutate("correct_pay_out"=ifelse(result=="Away",B365A,
ifelse(result=="Home",B365H,D)))
load(file="00 Data/betting_raw.rdata")
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria")
glimpse(samp_2019_bet)
head(samp_2019_bet)
samp_2019_bet$correct_pay_out <- ifelse(samp_2019_bet$result=="Away",
samp_2019_bet$B365A,
ifelse(samp_2019_bet$result=="Home",
samp_2019_bet$B365H,
samp_2019_bet$B365D))
glimpse(samp_2019_bet)
head(samp_2019_bet)
head(samp_2019_bet)
wpf %>% head()
samp_2019_bet <- samp_2019_bet[1:21, ]
wpf$correct_payout <- samp_2019_bet$correct_pay_out
glimpse(wpf)
head(wpf)
wpf$correct_payout <- ifelse(wpf$Accuracy==1,wpf$correct_payout,0)
wpf %>% head()
wpf %>% head(20)
wpf %>% head(2)
wpf %>% head(21)
wpf$correct_payout <- ifelse(wpf$Accuracy==1,wpf$correct_payout,-1.0)
wpf$correct_payout
sum(wpf$correct_payout)
wpf$correct_payout
wpf
sum(wpf$correct_payout)
correct_payout
wpf
sum(wpf$correct_payout)
100*0.15
500*0.15
100*0.15
1000*0.15
sum(wpf$correct_payout)
wpf$prob_greater_than_50 <- ifelse(wpf$D>=.5|wpf$L>=.5|wpf$W>=.5,1,0)
glimpse(wpf$prediction)
wpf
wpf
table(wpf$prob_greater_than_50)
table(wpf$prob_greater_than_50,wpf$Accuracy)
wpf %>% filter(prob_greater_than_50==1)
gt50 <- wpf %>% filter(prob_greater_than_50==1)
gt50$correct_payout %>% sum()
seq(.35,.55,by=0.025)
seq(.35,.55,by=0.01)
cut_offs <- seq(.35,.55,by=0.01)
cut_offs
load(file="00 Data/betting_raw.rdata")
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria")
samp_2019_bet$correct_pay_out <- ifelse(samp_2019_bet$result=="Away",
samp_2019_bet$B365A,
ifelse(samp_2019_bet$result=="Home",
samp_2019_bet$B365H,
samp_2019_bet$B365D))
samp_2019_bet <- samp_2019_bet[1:21, ]
wpf$correct_payout <- samp_2019_bet$correct_pay_out
wpf$correct_payout <- ifelse(wpf$Accuracy==1,wpf$correct_payout,-1.0)
sum(wpf$correct_payout)
wpf
load(file="00 Data/betting_raw.rdata")
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria")
samp_2019_bet$correct_pay_out <- ifelse(samp_2019_bet$result=="Away",
samp_2019_bet$B365A,
ifelse(samp_2019_bet$result=="Home",
samp_2019_bet$B365H,
samp_2019_bet$B365D))
samp_2019_bet <- samp_2019_bet[1:21, ]
wpf$correct_payout <- samp_2019_bet$correct_pay_out
wpf$correct_payout <- ifelse(wpf$Accuracy==1,wpf$correct_payout,-1.0)
sum(wpf$correct_payout)
wpf
rm(wpf)
probabilities <- c(mult_log_pred_prob,svm_pred_prob,samp_rf_pred_prob,samp_c5_pred_prob)
acc_weights <- c(mult_log_acc,svm_acc,ranger_acc,c5_acc)
acc_weights2<-acc_weights/sum(acc_weights)
#((mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc))
weighted_probabilities<-((mult_log_pred_prob*acc_weights2[1]) + (svm_pred_prob*acc_weights2[2]) + (samp_rf_pred_prob*acc_weights2[3]) + (samp_c5_pred_prob*acc_weights2[4])) %>% as.data.frame()
weighted_probabilities$prediction <- c("W","W","W","L","L","L","W","W","L","W","L","W","D","L","L","W","L","D","L","W","W")
weighted_probabilities$actual <- Samp_test$outcome
wpf <- weighted_probabilities %>%
mutate(Accuracy=ifelse(actual==prediction,1,0)) %>%
select(actual,prediction,Accuracy,D,L,W)
probabilities <- c(mult_log_pred_prob,svm_pred_prob,samp_rf_pred_prob,samp_c5_pred_prob)
acc_weights <- c(mult_log_acc,svm_acc,ranger_acc,c5_acc)
acc_weights2<-acc_weights/sum(acc_weights)
#((mult_log_pred_prob*mult_log_acc) + (svm_pred_prob*svm_acc) + (samp_rf_pred_prob*ranger_acc) + (samp_c5_pred_prob*c5_acc))
weighted_probabilities<-((mult_log_pred_prob*acc_weights2[1]) + (svm_pred_prob*acc_weights2[2]) + (samp_rf_pred_prob*acc_weights2[3]) + (samp_c5_pred_prob*acc_weights2[4])) %>% as.data.frame()
weighted_probabilities$prediction <- c("W","W","W","L","L","L","W","W","L","W","L","W","D","L","L","W","L","D","L","W","W")
weighted_probabilities$actual <- Samp_test$outcome
wpf <- weighted_probabilities %>%
mutate(Accuracy=ifelse(actual==prediction,1,0)) %>%
select(actual,prediction,Accuracy,D,L,W)
load(file="00 Data/betting_raw.rdata")
samp_2019_bet <- betting_raw_out %>%
filter(season=="2019-20") %>%
filter(HomeTeam=="Sampdoria"|AwayTeam=="Sampdoria")
samp_2019_bet$correct_pay_out <- ifelse(samp_2019_bet$result=="Away",
samp_2019_bet$B365A,
ifelse(samp_2019_bet$result=="Home",
samp_2019_bet$B365H,
samp_2019_bet$B365D))
samp_2019_bet <- samp_2019_bet[1:21, ]
wpf$correct_payout <- samp_2019_bet$correct_pay_out
wpf$correct_payout <- ifelse(wpf$Accuracy==1,wpf$correct_payout,-1.0)
sum(wpf$correct_payout)
wpf
wpf
i<-1
cut_offs <- seq(.44,.60,by=0.01)
wpf_t <- wpf
tmp_prob <- cut_offs[i]
wpf_t$prob_greater_than <- ifelse(wpf_t$D>=tmp_prob|wpf_t$L>=tmp_prob|wpf_t$W>=tmp_prob,1,0)
wpf_t
wpf_t <- wpf_t %>% filter(prob_greater_than==1)
wpf_t
return <- sum(wpf_t$correct_payout)
return
num_bets <- nrow(wpf_t)
return <- sum(wpf_t$correct_payout)
profit <- return-num_bets
profit
cut_offs <- seq(.44,.60,by=0.01)
for(i in 1:length(cut_offs)){
wpf_t <- wpf
tmp_prob <- cut_offs[i]
wpf_t$prob_greater_than <- ifelse(wpf_t$D>=tmp_prob|wpf_t$L>=tmp_prob|wpf_t$W>=tmp_prob,1,0)
wpf_t <- wpf_t %>% filter(prob_greater_than==1)
num_bets <- nrow(wpf_t)
return <- sum(wpf_t$correct_payout)
profit <- return-num_bets
out[i,1] <- tmp_prob
out[i,2] <- num_bets
out[i,3] <- return
out[i,4] <- profit
}
out <- data.frame(cut_off=NA,num_bets=NA,return=NA,profit=NA)
cut_offs <- seq(.44,.60,by=0.01)
for(i in 1:length(cut_offs)){
wpf_t <- wpf
tmp_prob <- cut_offs[i]
wpf_t$prob_greater_than <- ifelse(wpf_t$D>=tmp_prob|wpf_t$L>=tmp_prob|wpf_t$W>=tmp_prob,1,0)
wpf_t <- wpf_t %>% filter(prob_greater_than==1)
num_bets <- nrow(wpf_t)
return <- sum(wpf_t$correct_payout)
profit <- return-num_bets
out[i,1] <- tmp_prob
out[i,2] <- num_bets
out[i,3] <- return
out[i,4] <- profit
}
out
out <- data.frame(cut_off=NA,num_bets=NA,return=NA,profit=NA)
cut_offs <- seq(.44,.75,by=0.01)
for(i in 1:length(cut_offs)){
wpf_t <- wpf
tmp_prob <- cut_offs[i]
wpf_t$prob_greater_than <- ifelse(wpf_t$D>=tmp_prob|wpf_t$L>=tmp_prob|wpf_t$W>=tmp_prob,1,0)
wpf_t <- wpf_t %>% filter(prob_greater_than==1)
num_bets <- nrow(wpf_t)
return <- sum(wpf_t$correct_payout)
profit <- return-num_bets
out[i,1] <- tmp_prob
out[i,2] <- num_bets
out[i,3] <- return
out[i,4] <- profit
}
out
ggplot(out,aes(x=cut_offs,y=profit)) + geom_path()
ggplot(out,aes(x=cut_offs,y=profit)) + geom_path(size=num_bets)
out
samp_mult_log$finalModel
samp_mult_log$modelInfo
samp_mult_log$modelType
samp_mult_log$results
samp_mult_log$pred
predict(samp_mult_log,Samp_train)
table(Samp_train$outcome,predict(samp_mult_log,Samp_train))
table(Samp_train$outcome==predict(samp_mult_log,Samp_train))
table(Samp_train$outcome==predict(samp_mult_log,Samp_train)) 86/54
86/(86+54)
c1
table(Samp_train$outcome==predict(samp_mult_log,Samp_train))
table(Samp_train$outcome==predict(samp_mult_log,Samp_train))/length(Samp_train$outcome)
# Training multinomial model
set.seed(555)
multinom_fit = train(
outcome ~ .,
data = Samp_train,
method = "multinom",
preProc = c("pca"),
trControl = myTimeControl,
metric="logLoss",
trace=FALSE
)
multinom_fit
multinom_fit
multinom_test_acc <- table(Samp_train$outcome==predict(multinom_fit,Samp_train))/length(Samp_train$outcome)
multinom_test_acc
multinom_test_acc_T <- multinom_test_acc[2]
multinom_test_acc_T
multinom_train_acc <- table(Samp_train$outcome==predict(multinom_fit,Samp_train))/length(Samp_train$outcome)
multinom_train_acc_T <- multinom_train_acc[2]
multinom_train_acc_T
multinom_test <- predict(multinom_fit,Samp_test)
c1 <- confusionMatrix(multinom_test, as.factor(Samp_test$outcome))
c1
multinom_test_prob <- predict(multinom_fit,Samp_test,type="prob")
multinom_test_prob
multinom_test
x1
c1
# Test Accuracy
mult_log_acc <- c1$overall[[1]]
mult_log_acc
# Support-Vector Machine Modeling
set.seed(555)
svmLinear_fit = train(
outcome ~ .,
data = Samp_train,
method = "svmLinear",
preProc = c("pca"),
trControl = myTimeControl,
metric="logLoss",
trace=FALSE
)
svmLinear_fit
svmLinear_fit$preProcess
multinom_fit$preProcess
ggplot(scree_df,aes(NComp,Threshold_Var)) +
geom_point() + geom_line() + theme_minimal() +
geom_point(aes(x=10, y=0.775), colour="red", size=2.5) +
xlab("Number of Components") + ylab("Proportion of Variance Explained")
scree_df
table(Samp_train$outcome==predict(svmLinear_fit,Samp_train))/length(Samp_train$outcome)
svmLienar_train_acc <- table(Samp_train$outcome==predict(svmLinear_fit,Samp_train))/length(Samp_train$outcome)
svmLinear_train_acc_T <- svmLinear_train_acc[2]
### Training Accuracy -- 61.4%
svmLinear_train_acc <- table(Samp_train$outcome==predict(svmLinear_fit,Samp_train))/length(Samp_train$outcome)
svmLinear_train_acc_T <- svmLinear_train_acc[2]
svmLinear_train_acc_T
### Test Results
svmLinear_test <- predict(svmLinear_fit,Samp_test)
c2 <- confusionMatrix(svmLinear_test, as.factor(Samp_test$outcome))
c2
# Ranger Model
set.seed(555)
ranger_fit = train(
outcome ~ .,
data = Samp_train,
method = "ranger",
preProc = c("pca"),
trControl = myTimeControl
)
ranger_fit
ranger_train_acc <- table(Samp_train$outcome==predict(ranger_fit,Samp_train))/length(Samp_train$outcome)
ranger_train_acc_T <- ranger_train_acc[2]
ranger_train_acc_T
ranger_train_acc
ranger_fit
ranger_fit$pred
ranger_fit$finalModel
ranger_fit$results
ranger_fit$metric
ranger_fit$times
svmLinear_fit$pred
svmLinear_fit$results
svmLinear_fit$ %>% str()
svmLinear_fit %>% str()
table(Samp_train$outcome==predict(svmLinear_fit,Samp_train))/length(Samp_train$outcome)
predict(ranger_fit,Samp_train)
table(Samp_train$outcome==predict(ranger_fit,Samp_train))/length(Samp_train$outcome)
Samp_train$outcome
Samp_train$outcome==predict(ranger_fit,Samp_train)
model_grid <- expand.grid(
mtry = 5                                    # mtry specified here
,splitrule = "gini"
,min.node.size = 2
)
ranger_fit = train(
outcome ~ .,
data = Samp_train,
method = "ranger",
preProc = c("pca"),
trControl = myTimeControl,
tuneGrid = model_grid
)
ranger_fit
ranger_train_acc <- table(Samp_train$outcome==predict(ranger_fit,Samp_train))/length(Samp_train$outcome)
ranger_train_acc
model_grid <- expand.grid(
mtry = 10                                    # mtry specified here
,splitrule = "gini"
,min.node.size = 3
)
ranger_fit = train(
outcome ~ .,
data = Samp_train,
method = "ranger",
preProc = c("pca"),
trControl = myTimeControl,
tuneGrid = model_grid
)
ranger_fit
ranger_train_acc <- table(Samp_train$outcome==predict(ranger_fit,Samp_train))/length(Samp_train$outcome)
ranger_train_acc
# Ranger Model
set.seed(555)
model_grid <- expand.grid(
mtry = 10                                    # mtry specified here
,splitrule = "gini"
,min.node.size = 8
)
ranger_fit = train(
outcome ~ .,
data = Samp_train,
method = "ranger",
preProc = c("pca"),
trControl = myTimeControl,
tuneGrid = model_grid
)
ranger_fit
### Training Accuracy -- 100%
ranger_train_acc <- table(Samp_train$outcome==predict(ranger_fit,Samp_train))/length(Samp_train$outcome)
ranger_train_acc
# C5.0 Model
set.seed(500)
c50_fit = train(
outcome ~ .,
data = Samp_train,
method = "C5.0",
preProc = c("pca"),
trControl = myTimeControl,
metric="logLoss",
trace=FALSE
)
c50_fit_train_acc
predict(c50_fit,Samp_train)
Samp_train$outcome
predict(c50_fit,Samp_train)
Samp_train %>% glimpse()
plot(c50_fit)
plot(multinom_fit)
multinom_fit = train(
outcome ~ .,
data = Samp_train,
method = "multinom",
preProc = c("pca"),
trControl = myTimeControl,
metric="accuracy",
trace=FALSE
)
plot(multinom_fit)
knitr::opts_chunk$set(echo = TRUE)
library(randomForest)
library(tidyverse)
library(kableExtra)
library(caret)
library(caretEnsemble)
library(e1071)
library(knitr)
library(pROC)
library(ggcorrplot)
load(file="00 Data/full_raw_scraped.rdata")
load(file="00 Data/italy_elos.rdata")
italy_elos$Club <- as.factor(italy_elos$Club)
final_data[[1]]
final_data[[3]]
ss_lazio <- final_data[[3]] %>% head(5)
knitr::kable(ss_lazio[1:5,])
